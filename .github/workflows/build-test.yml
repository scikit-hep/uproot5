name: Test build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    # Required for miniconda to activate conda
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4

      - name: Get conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          miniforge-variant: Mambaforge
          use-mamba: true

      - name: Install ROOT
        if: matrix.python-version == 3.8  &&  runner.os != 'macOS'  &&  runner.os != 'Windows'
        run: |
          conda env list
          mamba install root
          conda list

      - name: Install sshd for fsspec ssh tests
        if: runner.os != 'macOS'  &&  runner.os != 'Windows'
        run: |
          sudo apt-get install -y openssh-server
          sudo service ssh restart
          ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
          chmod og-wx ~/.ssh/authorized_keys
          ssh-keyscan -H localhost >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no localhost echo "ssh connection successful"

      - name: Install XRootD
        if: runner.os != 'macOS'  &&  runner.os != 'Windows'
        run: |
          conda env list
          mamba install xrootd
          conda list

      - name: Pip install the package
        run: python -m pip install .[test,dev]

      - name: Run pytest
        run: |
          python -m pytest -vv tests --reruns 10 --reruns-delay 30 --only-rerun "(?i)http|ssl|timeout|expired|connection|socket"

  vanilla-build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.11']

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Pip install the package
        run: python -m pip install .[test,dev]

      - name: Run pytest
        run: |
          python -m pytest -vv tests --reruns 10 --reruns-delay 30 --only-rerun "(?i)http|ssl|timeout|expired|connection|socket"

  numpy1-build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.11']

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Pip install the package
        run: python -m pip install 'numpy<2' .[test]

      - name: Run pytest
        run: |
          python -m pytest -vv tests --reruns 10 --reruns-delay 30 --only-rerun "(?i)http|ssl|timeout|expired|connection|socket"

  emscripten-build:
    name: Build and test with Emscripten
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pyodide-build
        run: python3 -m pip install pyodide-build

      - name: Determine EMSDK version
        id: compute-emsdk-version
        run: |
          pyodide config list
          # Save EMSDK version
          EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version)
          echo "emsdk-version=$EMSCRIPTEN_VERSION" >> $GITHUB_OUTPUT

      - name: Install EMSDK
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ steps.compute-emsdk-version.outputs.emsdk-version }}

      - name: Build the package
        run: pyodide build

      - name: Set up Pyodide virtual environment
        run: |
          pyodide venv .venv-pyodide
          source .venv-pyodide/bin/activate
          # clone and install scikit-hep-testdata so that test files are available locally
          git clone https://github.com/scikit-hep/scikit-hep-testdata.git
          python -m pip install -e scikit-hep-testdata
          python -m pip install .[test-emscripten]

      - name: Run pytest
        run: |
          source .venv-pyodide/bin/activate
          # run a few tests compatible with wasm
          # cache and timeout don't work in wasm so we disable them
          python -m pytest -p no:cacheprovider --timeout 0 -vv \
            tests/test_0014_all_ttree_versions.py \
            tests/test_0016_interpretations.py \
            tests/test_0962_RNTuple_update.py \
            tests/test_1191_rntuple_fixes.py
