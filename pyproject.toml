[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
  "hatch-vcs"
]

[lint.mccabe]
max-complexity = 100

[project]
authors = [
  {name = "Jim Pivarski", email = "pivarski@princeton.edu"}
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: MacOS",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Software Development",
  "Topic :: Utilities"
]
dependencies = [
  "awkward>=2.4.6",
  "cramjam>=2.5.0",
  "numpy",
  "fsspec",
  "packaging",
  "typing_extensions>=4.1.0; python_version < \"3.11\""
]
description = "ROOT I/O in pure Python and NumPy."
dynamic = [
  "version"
]
license = "BSD-3-Clause"
name = "uproot"
readme = "README.md"
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
  "boost_histogram>=0.13",
  "dask-awkward>=2023.12.1",
  "dask[array,distributed]",
  "hist>=1.2",
  "pandas",
  "awkward-pandas"
]
http = ["aiohttp"]
s3 = ["s3fs"]
test = [
  "isal",
  "deflate",
  "xxhash",
  "minio",
  "aiohttp",
  "fsspec-xrootd",
  "s3fs",
  "paramiko",
  "pytest>=6",
  "pytest-timeout",
  "pytest-rerunfailures",
  "requests",
  "scikit-hep-testdata",
  "rangehttpserver"
]
xrootd = ["fsspec-xrootd"]

[project.urls]
Download = "https://github.com/scikit-hep/uproot5/releases"
Homepage = "https://github.com/scikit-hep/uproot5"

[tool.hatch.build.hooks.vcs]
version-file = "src/uproot/version.py"

[tool.hatch.version]
path = "src/uproot/__init__.py"
source = "vcs"

[tool.isort]
profile = "black"

[tool.pixi.dependencies]
aiohttp = "*"
awkward-pandas = "*"
boost-histogram = ">=0.13"
cramjam = ">=2.5.0"
dask = "*"
dask-awkward = "*"
fsspec = "*"
fsspec-xrootd = "*"
hist = ">=1.2"
minio = "*"
numpy = "*"
packaging = "*"
pandas = "*"
paramiko = "*"
pytest = "*"
pytest-rerunfailures = "*"
pytest-timeout = "*"
rangehttpserver = "*"
requests = "*"
s3fs = "*"
scikit-hep-testdata = "*"
typing_extensions = ">=4.1.0"
xxhash = "*"

[tool.pixi.environments]
py310 = ["py310"]
py312 = ["py312"]
py38 = ["py38"]
root310 = ["root", "py310"]

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.py38.dependencies]
python = "3.8.*"

[tool.pixi.feature.root.dependencies]
root = "*"
xrootd = "*"

[tool.pixi.project]
channels = ["conda-forge"]
name = "uproot"
platforms = ["linux-64", "osx-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
uproot = {path = ".", editable = true, extras = ["test", "dev"]}

[tool.pixi.tasks]
test = "pytest -vv tests --reruns 10 --reruns-delay 30 --only-rerun '(?i)http|ssl|timeout|expired|connection|socket'"

[tool.pytest.ini_options]
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
filterwarnings = [
  "error",
  "default:module 'sre_.*' is deprecated:DeprecationWarning",
  "ignore:unclosed transport <asyncio.sslproto._SSLProtocolTransport"  # https://github.com/aio-libs/aiohttp/issues/1115
]
log_cli_level = "info"
markers = [
  "slow",
  "network",
  "distributed",
  "xrootd"
]
minversion = "6.0"
testpaths = ["tests"]
timeout = 600
xfail_strict = true

[tool.ruff]
exclude = [
  "tests/*.py",
  "src/uproot/__init__.py",
  "docs-sphinx/*.py"
]
src = ["src"]

[tool.ruff.lint]
ignore = [
  "E501",
  "E722",
  "PLR",
  "PLW0120",  # else on loop without break
  "SIM118",  # key in dict, broken since uproot doesn't behave like a dict
  "PGH003",  # too-broad type ignore
  "SIM114",  # combine `if` branches using logical `or` operator
  "S307",  # no eval allowed
  "PLC1901",  # empty string is falsey (but I don't want to rely on such weak typing)
  "RUF012"  # enforces type annotations on a codebase that lacks type annotations
]
select = [
  "E",
  "F",
  "W",  # flake8
  "B",
  "B904",  # flake8-bugbear
  "I",  # isort
  # "ARG",         # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "ISC",  # flake8-implicit-str-concat
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "T20",  # flake8-print
  "UP",  # pyupgrade
  "YTT"  # flake8-2020
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"dev/*" = ["T20", "T201"]
"src/uproot/*/file.py" = ["SIM115"]

[tool.setuptools_scm]
write_to = "src/uproot/_version.py"
